generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  habits        Habit[]
  habitLogs     HabitLog[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Habit {
  id               String        @id @default(cuid())
  userId           String
  title            String
  description      String?
  frequencyType    FrequencyType
  specificDays     DayOfWeek[]
  intervalDays     Int?
  includeInStreaks Boolean       @default(true)
  expirationDate   DateTime?
  isActive         Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  position         Int           @default(0)
  durationCount    Int?
  durationNumber   Int?
  durationPeriod   PeriodType?
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs             HabitLog[]
}

model HabitLog {
  id        String   @id @default(cuid())
  habitId   String
  userId    String
  date      DateTime @default(now())
  completed Boolean  @default(true)
  notes     String?
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([habitId])
  @@index([userId])
  @@index([date])
}

enum FrequencyType {
  DAILY
  ALTERNATE_DAYS
  SPECIFIC_DAYS
  INTERVAL_DAYS
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum PeriodType {
  DAY
  WEEK
  MONTH
}
